#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram —á–∞—Ç–æ–≤
"""

import sys
import os
import requests
import json
from telethon import TelegramClient
from watcher.settings import API_ID, API_HASH, SESSION, API_HOST, API_PORT

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class ChatMonitorSetup:
    def __init__(self):
        self.api_url = f"http://{API_HOST}:{API_PORT}"
        self.client = None
        
    def connect_telegram(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            self.client = TelegramClient(SESSION, API_ID, API_HASH)
            self.client.start()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    def get_chat_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        if not self.client:
            return []
        
        try:
            dialogs = self.client.iter_dialogs()
            chats = []
            
            for dialog in dialogs:
                chat_info = {
                    'id': dialog.id,
                    'title': dialog.title or dialog.name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    'username': dialog.entity.username if hasattr(dialog.entity, 'username') else None,
                    'type': 'channel' if hasattr(dialog.entity, 'broadcast') else 
                           'group' if hasattr(dialog.entity, 'megagroup') else 'private'
                }
                chats.append(chat_info)
            
            return chats
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
    
    def display_chat_options(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ü–∏–π –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤"""
        print("\n" + "="*50)
        print("üîç –í–´–ë–û–† –ß–ê–¢–û–í –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("="*50)
        print("1. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ username —á–∞—Ç–∞")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ chat_id")
        print("3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã (*)")
        print("4. –ù–∞–π—Ç–∏ —á–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        print("0. –í—ã—Ö–æ–¥")
        print("="*50)
    
    def search_chat_by_name(self):
        """–ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        search_term = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip().lower()
        if not search_term:
            print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return None
        
        chats = self.get_chat_list()
        matches = []
        
        for chat in chats:
            if search_term in chat['title'].lower():
                matches.append(chat)
        
        if not matches:
            print(f"‚ùå –ß–∞—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        if len(matches) == 1:
            chat = matches[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç: {chat['title']} (ID: {chat['id']})")
            return chat['id']
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} —á–∞—Ç–æ–≤:")
        print("-" * 70)
        print(f"{'‚Ññ':<3} {'ID':<15} {'Username':<20} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<25}")
        print("-" * 70)
        
        for i, chat in enumerate(matches, 1):
            username = chat['username'] or "–Ω–µ—Ç"
            title = chat['title'][:22] + "..." if len(chat['title']) > 25 else chat['title']
            print(f"{i:<3} {chat['id']:<15} {username:<20} {title:<25}")
        
        print("-" * 70)
        
        while True:
            try:
                choice = int(input(f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç (1-{len(matches)}): "))
                if 1 <= choice <= len(matches):
                    selected_chat = matches[choice - 1]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç: {selected_chat['title']}")
                    return selected_chat['id']
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(matches)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    def get_chat_selection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            self.display_chat_options()
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-4): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return None, None
            
            elif choice == "1":
                username = input("–í–≤–µ–¥–∏—Ç–µ username —á–∞—Ç–∞ (–±–µ–∑ @): ").strip()
                if username:
                    return "username", username
                else:
                    print("‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            
            elif choice == "2":
                chat_id = input("–í–≤–µ–¥–∏—Ç–µ chat_id (—á–∏—Å–ª–æ –∏–ª–∏ -1001234567890): ").strip()
                if chat_id:
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                        int(chat_id)
                        return "chat_id", chat_id
                    except ValueError:
                        print("‚ùå chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                else:
                    print("‚ùå chat_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            
            elif choice == "3":
                confirm = input("‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –í–°–ï —á–∞—Ç—ã? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
                if confirm in ['–¥–∞', 'yes', 'y', '–¥']:
                    return "all", "*"
                else:
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            
            elif choice == "4":
                chat_id = self.search_chat_by_name()
                if chat_id:
                    return "chat_id", str(chat_id)
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def get_pattern_and_action(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\n" + "="*50)
        print("üìù –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ê–í–ò–õ–ê")
        print("="*50)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–≤–æ–¥
        print("\nüîç –ß—Ç–æ –∏—Å–∫–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö?")
        pattern = input("–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
        if not pattern:
            print("‚ùå –§—Ä–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
            return None
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"\n‚úÖ –ü—Ä–∞–≤–∏–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
        print(f"üìù –ò—â–µ–º —Ñ—Ä–∞–∑—É: '{pattern}'")
        print(f"‚ö° –ü—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏: –≤—ã–≤–æ–¥ '–Ω–∞–π–¥–µ–Ω–æ!' –≤ –∫–æ–Ω—Å–æ–ª—å")
        
        return {
            'pattern': pattern,
            'match_type': 'substring',  # –í—Å–µ–≥–¥–∞ substring –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            'action': 'notify',
            'action_payload': f'–Ω–∞–π–¥–µ–Ω–æ! (—Ñ—Ä–∞–∑–∞: {pattern})'
        }
    
    def create_rule(self, chat_type, chat_value, rule_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —á–µ—Ä–µ–∑ API"""
        try:
            rule = {
                'chat_id': chat_value,
                'pattern': rule_data['pattern'],
                'match_type': rule_data['match_type'],
                'action': rule_data['action'],
                'action_payload': rule_data['action_payload'],
                'enabled': True
            }
            
            response = requests.post(f"{self.api_url}/rules", json=rule)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! ID: {result['id']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return False
    
    def test_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            response = requests.get(f"{self.api_url}/health")
            if response.status_code == 200:
                print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!")
                return True
            else:
                print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
            print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python run_api.py")
            return False
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê TELEGRAM –ß–ê–¢–û–í")
        print("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        if not self.test_api_connection():
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        if not self.connect_telegram():
            return
        
        while True:
            # –í—ã–±–æ—Ä —á–∞—Ç–∞
            chat_type, chat_value = self.get_chat_selection()
            if chat_type is None:
                break
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª–∞
            rule_data = self.get_pattern_and_action()
            if rule_data is None:
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
            print("\n" + "="*50)
            print("üìã –°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò")
            print("="*50)
            print(f"–ß–∞—Ç: {chat_value}")
            print(f"–ò—â–µ–º —Ñ—Ä–∞–∑—É: '{rule_data['pattern']}'")
            print(f"–î–µ–π—Å—Ç–≤–∏–µ: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("\n–°–æ–∑–¥–∞—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if confirm in ['–¥–∞', 'yes', 'y', '–¥']:
                if self.create_rule(chat_type, chat_value, rule_data):
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                    print("üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ watcher: python run_watcher.py")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ")
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            
            # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
            continue_setup = input("\n–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if continue_setup not in ['–¥–∞', 'yes', 'y', '–¥']:
                break
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        if self.client:
            self.client.disconnect()
        
        print("\nüëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ watcher: python run_watcher.py")

if __name__ == "__main__":
    setup = ChatMonitorSetup()
    setup.run()
